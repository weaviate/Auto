{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    `limit`\u00a0returned objects\n\nOften, you will only want the top\u00a0`n`\u00a0results from the query. This can be achieved by setting a\u00a0`limit`\u00a0as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1\n    ) {\n      question\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the summary, content, speaker, podNum, clipNumber, Featured, inPodcast summary, inPodcast podNum, inChapter description, inChapter title, inChapter timeStart, inChapter timeEnd, inChapter duration, inChapter fromPodcast summary, and inChapter fromPodcast podNum of 10 PodClips.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PodClip(\n      limit: 10\n    ) {\n      summary\n      content\n      speaker\n      podNum\n      clipNumber\n      Featured\n      inPodcast {\n        ... on Podcast {\n          summary\n          podNum\n          hasClip {\n            ... on PodClip {\n              summary\n              content\n              speaker\n              podNum\n              clipNumber\n              Featured\n              inPodcast {\n                ... on Podcast {\n                  summary\n                  podNum\n                }\n              }\n              inChapter {\n                ... on Chapter {\n                  description\n                  title\n                  timeStart\n                  timeEnd\n                  duration\n                  fromPodcast {\n                    ... on Podcast {\n                      summary\n                      podNum\n                    }\n                  }\n                }\n              }\n            }\n          }\n          hasChapter {\n            ... on Chapter {\n              description\n              title\n              timeStart\n              timeEnd\n              duration\n              fromPodcast {\n                ... on Podcast {\n                  summary\n                  podNum\n                }\n              }\n              hasClip {\n                ... on PodClip {\n                  summary\n                  content\n                  speaker\n                  podNum\n                  clipNumber\n                  Featured\n                  inPodcast {\n                    ... on Podcast {\n                      summary\n                      podNum\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      inChapter {\n        ... on Chapter {\n          description\n          title\n          timeStart\n          timeEnd\n          duration\n          fromPodcast {\n            ... on Podcast {\n              summary\n              podNum\n            }\n          }\n          hasClip {\n            ... on PodClip {\n              summary\n              content\n              speaker\n              podNum\n              clipNumber\n              Featured\n              inPodcast {\n                ... on Podcast {\n                  summary\n                  podNum\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n", "nlcommand": "```text\nShow me the summary, content, speaker, podNum, clipNumber, Featured, inPodcast summary, inPodcast podNum, inChapter description, inChapter title, inChapter timeStart, inChapter timeEnd, inChapter duration, inChapter fromPodcast summary, and inChapter fromPodcast podNum of 10 PodClips.\n```", "apiRef": "`limit`\u00a0returned objects\n\nOften, you will only want the top\u00a0`n`\u00a0results from the query. This can be achieved by setting a\u00a0`limit`\u00a0as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-limit-results.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}", "schemaPath": "podcast.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    `limit`\u00a0returned objects\n\nOften, you will only want the top\u00a0`n`\u00a0results from the query. This can be achieved by setting a\u00a0`limit`\u00a0as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1\n    ) {\n      question\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, origin, grape variety, tasting notes, vintage year, and related winery information of 10 wines.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Wine (\n      limit: 10\n    ) {\n      name\n      origin\n      grapeVariety\n      tastingNotes\n      vintageYear\n      isRed\n      relatedWinery {\n        name\n        location\n        foundedYear\n        producesWine {\n          name\n          origin\n          grapeVariety\n          tastingNotes\n          vintageYear\n          isRed\n        }\n      }\n    }\n  }\n}\n```\n```", "nlcommand": "```text\nShow me the name, origin, grape variety, tasting notes, vintage year, and related winery information of 10 wines.\n```", "apiRef": "`limit`\u00a0returned objects\n\nOften, you will only want the top\u00a0`n`\u00a0results from the query. This can be achieved by setting a\u00a0`limit`\u00a0as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-limit-results.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}", "schemaPath": "wines.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    `limit`\u00a0returned objects\n\nOften, you will only want the top\u00a0`n`\u00a0results from the query. This can be achieved by setting a\u00a0`limit`\u00a0as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1\n    ) {\n      question\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, symbol, market cap, stability status, and exchange details of the top 10 cryptocurrencies.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Cryptocurrency (\n      limit: 10\n    ) {\n      name\n      symbol\n      marketCap\n      isStableCoin\n      onExchange {\n        name\n        country\n        foundedYear\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, symbol, market cap, stability status, and exchange details of the top 10 cryptocurrencies.\n```", "apiRef": "`limit`\u00a0returned objects\n\nOften, you will only want the top\u00a0`n`\u00a0results from the query. This can be achieved by setting a\u00a0`limit`\u00a0as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-limit-results.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}", "schemaPath": "cryptocurrency.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    `limit`\u00a0returned objects\n\nOften, you will only want the top\u00a0`n`\u00a0results from the query. This can be achieved by setting a\u00a0`limit`\u00a0as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1\n    ) {\n      question\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, city, wins, isChampion, and inLeague details of 10 teams.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Team (\n      limit: 10\n    ) {\n      name\n      city\n      wins\n      isChampion\n      inLeague {\n        ... on League {\n          name\n          teams\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, city, wins, isChampion, and inLeague details of 10 teams.\n```", "apiRef": "`limit`\u00a0returned objects\n\nOften, you will only want the top\u00a0`n`\u00a0results from the query. This can be achieved by setting a\u00a0`limit`\u00a0as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-limit-results.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Weight (boost) searched properties\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F score.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property. Weaviate then scores the results with\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 PodClips with BM25 keyword scoring to the query 'podcast' in the summary or content, weighting the summary matches twice as high as the content matches, and show the summary, content, speaker, podNum, clipNumber, Featured, inPodcast's summary and podNum, inChapter's description, title, timeStart, timeEnd, duration, and fromPodcast's summary and podNum.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PodClip(\n      limit: 5,\n      bm25: {\n        query: \"podcast\",\n        properties: [\"summary^2\", \"content\"]\n      }\n    ) {\n      summary\n      content\n      speaker\n      podNum\n      clipNumber\n      Featured\n      inPodcast {\n        ... on Podcast {\n          summary\n          podNum\n        }\n      }\n      inChapter {\n        ... on Chapter {\n          description\n          title\n          timeStart\n          timeEnd\n          duration\n          fromPodcast {\n            ... on Podcast {\n              summary\n              podNum\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nNote: Please make sure to replace `PodClip`, `Podcast`, and `Chapter` with the correct class names from the custom database schema.", "nlcommand": "```text\nGet me the top 5 PodClips with BM25 keyword scoring to the query 'podcast' in the summary or content, weighting the summary matches twice as high as the content matches, and show the summary, content, speaker, podNum, clipNumber, Featured, inPodcast's summary and podNum, inChapter's description, title, timeStart, timeEnd, duration, and fromPodcast's summary and podNum.\n```", "apiRef": "Weight (boost) searched properties\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F score.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property. Weaviate then scores the results with\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}", "schemaPath": "podcast.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Weight (boost) searched properties\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F score.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property. Weaviate then scores the results with\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 news outlets with BM25 keyword scoring to the query 'breaking news' in the name or the name of any journalist they have, weighting the name matches twice as high as the journalist name matches, and show the name, founding year, online status, and the name and years of experience of any journalist they have.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NewsOutlet(\n      limit: 5,\n      bm25: {\n        query: \"breaking news\",\n        properties: [\"name^2\", \"hasJournalist.name\"]\n      }\n    ) {\n      name\n      foundingYear\n      isOnline\n      hasJournalist {\n        ... on Journalist {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 news outlets with BM25 keyword scoring to the query 'breaking news' in the name or the name of any journalist they have, weighting the name matches twice as high as the journalist name matches, and show the name, founding year, online status, and the name and years of experience of any journalist they have.\n```", "apiRef": "Weight (boost) searched properties\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F score.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property. Weaviate then scores the results with\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}", "schemaPath": "news.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Score and ExplainScore in Hybrid Search\n\nScore / explainScore[]\n\nThe\u00a0`score`\u00a0and\u00a0`explainScore`\u00a0sub-properties aim to explain the outputs. They can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the two properties to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the PodClips related to 'technology'. Show me the summary, content, speaker, pod number, clip number, featured status, and additional information about the score and explain score. Limit the results to 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PodClip(\n      hybrid: {\n        query: \"food\"\n      },\n      limit: 3\n    ) {\n      summary\n      content\n      speaker\n      podNum\n      clipNumber\n      Featured\n      inPodcast {\n        summary\n        podNum\n      }\n      inChapter {\n        description\n        title\n        timeStart\n        timeEnd\n        duration\n        fromPodcast {\n          summary\n          podNum\n        }\n        hasClip {\n          summary\n          content\n          speaker\n          podNum\n          clipNumber\n          Featured\n        }\n      }\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the PodClips related to 'technology'. Show me the summary, content, speaker, pod number, clip number, featured status, and additional information about the score and explain score. Limit the results to 10.\n```", "apiRef": "Score and ExplainScore in Hybrid Search\n\nScore / explainScore[]\n\nThe\u00a0`score`\u00a0and\u00a0`explainScore`\u00a0sub-properties aim to explain the outputs. They can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the two properties to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-explainScore.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}", "schemaPath": "podcast.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Score and ExplainScore in Hybrid Search\n\nScore / explainScore[]\n\nThe\u00a0`score`\u00a0and\u00a0`explainScore`\u00a0sub-properties aim to explain the outputs. They can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the two properties to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the legal cases with a hybrid search of 'criminal'. Show me the case title, summary, year, ongoing status, and the involved parties' names, roles, and number of cases. Also, please explain how the Hybrid score is calculated and provide the score and explainScore for each case.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LegalCase(\n      hybrid: {\n        query: \"criminal\"\n      },\n      limit: 10\n    ) {\n      caseTitle\n      caseSummary\n      year\n      isOngoing\n      involvedParty {\n        name\n        role\n        numberOfCases\n      }\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the legal cases with a hybrid search of 'criminal'. Show me the case title, summary, year, ongoing status, and the involved parties' names, roles, and number of cases. Also, please explain how the Hybrid score is calculated and provide the score and explainScore for each case.\n```\n", "apiRef": "Score and ExplainScore in Hybrid Search\n\nScore / explainScore[]\n\nThe\u00a0`score`\u00a0and\u00a0`explainScore`\u00a0sub-properties aim to explain the outputs. They can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the two properties to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-explainScore.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}", "schemaPath": "legalcases.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Score and ExplainScore in Hybrid Search\n\nScore / explainScore[]\n\nThe\u00a0`score`\u00a0and\u00a0`explainScore`\u00a0sub-properties aim to explain the outputs. They can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the two properties to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the code repositories with a hybrid search of 'machine learning'. Show me the repository name, description, number of stars, whether it is a fork, and the username, real name, and contributions of the maintainers. Please also explain how the Hybrid score is calculated and provide the score and explainScore for each repository.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CodeRepository(\n      hybrid: {\n        query: \"machine learning\"\n      },\n      limit: 10\n    ) {\n      repositoryName\n      description\n      stars\n      isFork\n      maintainedBy {\n        username\n        realName\n        contributions\n      }\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the code repositories with a hybrid search of 'machine learning'. Show me the repository name, description, number of stars, whether it is a fork, and the username, real name, and contributions of the maintainers. Please also explain how the Hybrid score is calculated and provide the score and explainScore for each repository.\n```\n", "apiRef": "Score and ExplainScore in Hybrid Search\n\nScore / explainScore[]\n\nThe\u00a0`score`\u00a0and\u00a0`explainScore`\u00a0sub-properties aim to explain the outputs. They can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the two properties to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-explainScore.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}", "schemaPath": "coderepos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Score and ExplainScore in Hybrid Search\n\nScore / explainScore[]\n\nThe\u00a0`score`\u00a0and\u00a0`explainScore`\u00a0sub-properties aim to explain the outputs. They can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the two properties to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 wines with a hybrid search of 'chardonnay'. For each wine, show me the name, origin, grape variety, tasting notes, vintage year, whether it is red or not, and the related winery's name, location, and founded year. Also, please explain how the Hybrid score is calculated and show the score and explainScore for each wine.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Wine(\n      hybrid: {\n        query: \"chardonnay\"\n      },\n      limit: 5\n    ) {\n      name\n      origin\n      grapeVariety\n      tastingNotes\n      vintageYear\n      isRed\n      relatedWinery {\n        name\n        location\n        foundedYear\n      }\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 wines with a hybrid search of 'chardonnay'. For each wine, show me the name, origin, grape variety, tasting notes, vintage year, whether it is red or not, and the related winery's name, location, and founded year. Also, please explain how the Hybrid score is calculated and show the score and explainScore for each wine.\n```\n", "apiRef": "Score and ExplainScore in Hybrid Search\n\nScore / explainScore[]\n\nThe\u00a0`score`\u00a0and\u00a0`explainScore`\u00a0sub-properties aim to explain the outputs. They can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the two properties to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-explainScore.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}", "schemaPath": "wines.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Score and ExplainScore in Hybrid Search\n\nScore / explainScore[]\n\nThe\u00a0`score`\u00a0and\u00a0`explainScore`\u00a0sub-properties aim to explain the outputs. They can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the two properties to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the patients with a hybrid search of 'cancer', please explain how the Hybrid score is calculated and show the name, diagnosis, age, insurance status, primary doctor's name, and their experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Patient(\n      limit: 10,\n      hybrid: {\n        query: \"cancer\"\n      }\n    ) {\n      name\n      diagnosis\n      age\n      isInsured\n      primaryDoctor {\n        name\n        experience\n      }\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the patients with a hybrid search of 'cancer', please explain how the Hybrid score is calculated and show the name, diagnosis, age, insurance status, primary doctor's name, and their experience.\n```", "apiRef": "Score and ExplainScore in Hybrid Search\n\nScore / explainScore[]\n\nThe\u00a0`score`\u00a0and\u00a0`explainScore`\u00a0sub-properties aim to explain the outputs. They can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the two properties to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-explainScore.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}", "schemaPath": "healthcare.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Score and ExplainScore in Hybrid Search\n\nScore / explainScore[]\n\nThe\u00a0`score`\u00a0and\u00a0`explainScore`\u00a0sub-properties aim to explain the outputs. They can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the two properties to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 cryptocurrencies with a hybrid search for 'Bitcoin'. For each cryptocurrency, show me the name, symbol, market cap, stability status, and exchange information including the name, country, and founded year. Also, please explain how the Hybrid score is calculated and provide the score and explainScore for each cryptocurrency.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Cryptocurrency(\n      hybrid: {\n        query: \"Bitcoin\"\n      },\n      limit: 10\n    ) {\n      name\n      symbol\n      marketCap\n      isStableCoin\n      onExchange {\n        name\n        country\n        foundedYear\n      }\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 cryptocurrencies with a hybrid search for 'Bitcoin'. For each cryptocurrency, show me the name, symbol, market cap, stability status, and exchange information including the name, country, and founded year. Also, please explain how the Hybrid score is calculated and provide the score and explainScore for each cryptocurrency.\n```\n", "apiRef": "Score and ExplainScore in Hybrid Search\n\nScore / explainScore[]\n\nThe\u00a0`score`\u00a0and\u00a0`explainScore`\u00a0sub-properties aim to explain the outputs. They can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the two properties to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-explainScore.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}", "schemaPath": "cryptocurrency.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Score and ExplainScore in Hybrid Search\n\nScore / explainScore[]\n\nThe\u00a0`score`\u00a0and\u00a0`explainScore`\u00a0sub-properties aim to explain the outputs. They can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the two properties to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the products with a hybrid search of 'organic food'. Show me the name, description, price, whether it is organic, category name, and the number of products in each category. Also, please explain how the Hybrid score is calculated and show the score and explainScore.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      hybrid: {\n        query: \"organic food\"\n      },\n      limit: 10\n    ) {\n      name\n      description\n      price\n      isOrganic\n      category {\n        name\n        productCount\n      }\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the products with a hybrid search of 'organic food'. Show me the name, description, price, whether it is organic, category name, and the number of products in each category. Also, please explain how the Hybrid score is calculated and show the score and explainScore.\n```\n", "apiRef": "Score and ExplainScore in Hybrid Search\n\nScore / explainScore[]\n\nThe\u00a0`score`\u00a0and\u00a0`explainScore`\u00a0sub-properties aim to explain the outputs. They can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the two properties to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-explainScore.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}", "schemaPath": "grocerystore.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Score and ExplainScore in Hybrid Search\n\nScore / explainScore[]\n\nThe\u00a0`score`\u00a0and\u00a0`explainScore`\u00a0sub-properties aim to explain the outputs. They can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the two properties to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 football teams, please explain how the Hybrid score is calculated and show the team name, city, number of wins, championship status, league name, and number of teams in the league.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Team(\n      hybrid: {\n        query: \"football\"\n      },\n      limit: 10\n    ) {\n      name\n      city\n      wins\n      isChampion\n      inLeague {\n        name\n        teams\n      }\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 football teams, please explain how the Hybrid score is calculated and show the team name, city, number of wins, championship status, league name, and number of teams in the league.\n```", "apiRef": "Score and ExplainScore in Hybrid Search\n\nScore / explainScore[]\n\nThe\u00a0`score`\u00a0and\u00a0`explainScore`\u00a0sub-properties aim to explain the outputs. They can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the two properties to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n        explainScore\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-explainScore.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Autocut in Hybrid Search\n\nAnother way to limit the results returned by a hybrid search is to use the\u00a0`autocut`\u00a0filter. Autocut takes a positive integer parameter\u00a0`N`, looks at the\u00a0score\u00a0of each result, and stops returning results after the\u00a0`N`th \"drop\" in score. Because\u00a0`hybrid`\u00a0combines a vector search with a keyword (BM25F) search, their scores/distances cannot be directly compared, so the cut points may not be intuitive.\n\nAutocut can be used as follows:\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      hybrid: {\n        query: \"safety\"\n      },\n      autocut: 1\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}\n\n    COMMAND:\n    ```text\nGet me Pod Clips with a hybrid search of 'technology', cutting results off with the first steep drop in the Hybrid search score, and show the summary, content, speaker, pod number, clip number, featured status, podcast summary, podcast number, chapter description, chapter title, chapter start time, chapter end time, chapter duration, and podcast summary for the corresponding podcast and chapter.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PodClip(\n      hybrid: {\n        query: \"safety\"\n      },\n      autocut: 1\n    ) {\n      summary\n      content\n      speaker\n      podNum\n      clipNumber\n      Featured\n      inPodcast {\n        ... on Podcast {\n          summary\n          podNum\n        }\n      }\n      inChapter {\n        ... on Chapter {\n          description\n          title\n          timeStart\n          timeEnd\n          duration\n          fromPodcast {\n            ... on Podcast {\n              summary\n              podNum\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nNote: Please make sure to replace `PodClip`, `Podcast`, and `Chapter` with the correct class names from the custom database schema.", "nlcommand": "```text\nGet me Pod Clips with a hybrid search of 'technology', cutting results off with the first steep drop in the Hybrid search score, and show the summary, content, speaker, pod number, clip number, featured status, podcast summary, podcast number, chapter description, chapter title, chapter start time, chapter end time, chapter duration, and podcast summary for the corresponding podcast and chapter.\n```", "apiRef": "Autocut in Hybrid Search\n\nAnother way to limit the results returned by a hybrid search is to use the\u00a0`autocut`\u00a0filter. Autocut takes a positive integer parameter\u00a0`N`, looks at the\u00a0score\u00a0of each result, and stops returning results after the\u00a0`N`th \"drop\" in score. Because\u00a0`hybrid`\u00a0combines a vector search with a keyword (BM25F) search, their scores/distances cannot be directly compared, so the cut points may not be intuitive.\n\nAutocut can be used as follows:\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      hybrid: {\n        query: \"safety\"\n      },\n      autocut: 1\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-with-autocut.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}", "schemaPath": "podcast.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Autocut in Hybrid Search\n\nAnother way to limit the results returned by a hybrid search is to use the\u00a0`autocut`\u00a0filter. Autocut takes a positive integer parameter\u00a0`N`, looks at the\u00a0score\u00a0of each result, and stops returning results after the\u00a0`N`th \"drop\" in score. Because\u00a0`hybrid`\u00a0combines a vector search with a keyword (BM25F) search, their scores/distances cannot be directly compared, so the cut points may not be intuitive.\n\nAutocut can be used as follows:\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      hybrid: {\n        query: \"safety\"\n      },\n      autocut: 1\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me products with a hybrid search of 'organic', cutting results off with the first steep drop in the Hybrid search score, and show the name, description, price, organic status, and category name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      hybrid: {\n        query: \"organic\",\n        autocut: 1\n      }\n    ) {\n      name\n      description\n      price\n      isOrganic\n      category {\n        ... on Category {\n          name\n          productCount\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me products with a hybrid search of 'organic', cutting results off with the first steep drop in the Hybrid search score, and show the name, description, price, organic status, and category name.\n```", "apiRef": "Autocut in Hybrid Search\n\nAnother way to limit the results returned by a hybrid search is to use the\u00a0`autocut`\u00a0filter. Autocut takes a positive integer parameter\u00a0`N`, looks at the\u00a0score\u00a0of each result, and stops returning results after the\u00a0`N`th \"drop\" in score. Because\u00a0`hybrid`\u00a0combines a vector search with a keyword (BM25F) search, their scores/distances cannot be directly compared, so the cut points may not be intuitive.\n\nAutocut can be used as follows:\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      hybrid: {\n        query: \"safety\"\n      },\n      autocut: 1\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-with-autocut.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}", "schemaPath": "grocerystore.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the PodClips related to technology using a hybrid search with an alpha value of 0.25. Show me the summary, content, speaker, pod number, clip number, featured status, and details of the podcast and chapter it belongs to. Include the summary, pod number, description, title, start time, end time, duration, and details of the podcast it belongs to.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PodClip(\n      limit: 5,\n      hybrid: {\n        query: \"technology\",\n        alpha: 0.25\n      }\n    ) {\n      summary\n      content\n      speaker\n      podNum\n      clipNumber\n      Featured\n      inPodcast {\n        ... on Podcast {\n          summary\n          podNum\n        }\n      }\n      inChapter {\n        ... on Chapter {\n          description\n          title\n          timeStart\n          timeEnd\n          duration\n          fromPodcast {\n            ... on Podcast {\n              summary\n              podNum\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the PodClips related to technology using a hybrid search with an alpha value of 0.25. Show me the summary, content, speaker, pod number, clip number, featured status, and details of the podcast and chapter it belongs to. Include the summary, pod number, description, title, start time, end time, duration, and details of the podcast it belongs to.\n```\n", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}", "schemaPath": "podcast.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 PodClips with BM25 keyword scoring to 'technology' in the summary, and show the summary, content, speaker, podNum, clipNumber, Featured, inPodcast summary, inPodcast podNum, inChapter description, inChapter title, inChapter timeStart, inChapter timeEnd, inChapter duration, inChapter fromPodcast summary, and inChapter fromPodcast podNum.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PodClip(\n      limit: 5,\n      bm25: {\n        query: \"technology\",\n        properties: [\"summary\"]\n      }\n    ) {\n      summary\n      content\n      speaker\n      podNum\n      clipNumber\n      Featured\n      inPodcast {\n        ... on Podcast {\n          summary\n          podNum\n        }\n      }\n      inChapter {\n        ... on Chapter {\n          description\n          title\n          timeStart\n          timeEnd\n          duration\n          fromPodcast {\n            ... on Podcast {\n              summary\n              podNum\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nNote: Please make sure to replace the `... on` syntax with the appropriate class names from the custom schema.", "nlcommand": "```text\nGet me the top 5 PodClips with BM25 keyword scoring to 'technology' in the summary, and show the summary, content, speaker, podNum, clipNumber, Featured, inPodcast summary, inPodcast podNum, inChapter description, inChapter title, inChapter timeStart, inChapter timeEnd, inChapter duration, inChapter fromPodcast summary, and inChapter fromPodcast podNum.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}", "schemaPath": "podcast.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Retrieve the object\u00a0`vector`\n\nTo retrieve the object vector, request the\u00a0`_additional`\u00a0property and\u00a0`vector`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        vector\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the make, model, year, vector representation, and ownership details (name and owned cars) of cars.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car {\n      make\n      model\n      year\n      _additional {\n        vector\n      }\n      ownedBy {\n        name\n        ownedCars\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the make, model, year, vector representation, and ownership details (name and owned cars) of cars.\n```", "apiRef": "Retrieve the object\u00a0`vector`\n\nTo retrieve the object vector, request the\u00a0`_additional`\u00a0property and\u00a0`vector`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        vector\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-vector.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}", "schemaPath": "automotiverepair.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the event name and description of historical events that occurred after the year 1800 and either had a significant impact or involved countries with a population greater than 100,000,000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HistoricalEvent(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"eventName\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n              {\n                path: [\"year\"],\n                operator: GreaterThan,\n                valueInt: 1800\n              },\n              {\n                operator: Or,\n                operands: [\n                  {\n                    path: [\"hadSignificantImpact\"],\n                    operator: Equals,\n                    valueBoolean: true\n                  },\n                  {\n                    path: [\"involvedCountries\", \"... on\", \"Country\", \"population\"],\n                    operator: GreaterThan,\n                    valueInt: 100000000\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ) {\n      eventName\n      description\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the event name and description of historical events that occurred after the year 1800 and either had a significant impact or involved countries with a population greater than 100,000,000.\n```", "apiRef": "Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-where-nested-multiple-conditions.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}", "schemaPath": "historicalevent.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title and instructions of recipes with a prep time of less than 30 minutes that either contain \"pasta\" in the title or use an ingredient that contains \"tomato\" in its name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Recipe(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"title\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n              {\n                path: [\"prepTime\"],\n                operator: GreaterThan,\n                valueInt: 700\n              },\n              {\n                path: [\"prepTime\"],\n                operator: LessThan,\n                valueInt: 300\n              }\n            ]\n          }\n        ]\n      }\n    ) {\n      title\n      instructions\n      prepTime\n      isVegetarian\n      usesIngredient {\n        ... on Ingredient {\n          name\n          calories\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title and instructions of recipes with a prep time of less than 30 minutes that either contain \"pasta\" in the title or use an ingredient that contains \"tomato\" in its name.\n```", "apiRef": "Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-where-nested-multiple-conditions.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}", "schemaPath": "recipes.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name and description of yoga poses with a complexity level greater than 5 that either contain the word \"balance\" in the name or belong to the Hatha Yoga style.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    YogaPose(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"name\"],\n            operator: Like,\n            valueText: \"*balance*\"\n          },\n          {\n            operator: Or,\n            operands: [\n              {\n                path: [\"complexityLevel\"],\n                operator: GreaterThan,\n                valueInt: 5\n              },\n              {\n                path: [\"fromYogaStyle\"],\n                operator: Equal,\n                value: {\n                  operator: And,\n                  operands: [\n                    {\n                      path: [\"styleName\"],\n                      operator: Equal,\n                      valueText: \"Hatha Yoga\"\n                    }\n                  ]\n                }\n              }\n            ]\n          }\n        ]\n      }\n    ) {\n      name\n      description\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name and description of yoga poses with a complexity level greater than 5 that either contain the word \"balance\" in the name or belong to the Hatha Yoga style.\n```", "apiRef": "Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-where-nested-multiple-conditions.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}", "schemaPath": "yogapose.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name and description of instruments introduced after the year 2000 that are either guitars or played by musicians in the rock genre.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Instrument(\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"yearIntroduced\"],\n            operator: GreaterThan,\n            valueInt: 2000\n          },\n          {\n            operator: Or,\n            operands: [\n              {\n                path: [\"name\"],\n                operator: Like,\n                valueText: \"*guitar*\"\n              },\n              {\n                path: [\"playedBy\", \"... on\", \"Musician\", \"genre\"],\n                operator: Equal,\n                valueText: \"rock\"\n              }\n            ]\n          }\n        ]\n      }\n    ) {\n      name\n      description\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name and description of instruments introduced after the year 2000 that are either guitars or played by musicians in the rock genre.\n```", "apiRef": "Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-where-nested-multiple-conditions.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}", "schemaPath": "musicalinstrument.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name and rules of board games that have more than 2 minimum players and either have \"strategy\" in their name or are created by Martin Wallace and have been active for more than 10 years.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BoardGame(\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"minPlayers\"],\n            operator: GreaterThan,\n            valueInt: 2\n          },\n          {\n            operator: Or,\n            operands: [\n              {\n                path: [\"name\"],\n                operator: Like,\n                valueText: \"*strategy*\"\n              },\n              {\n                path: [\"createdBy\"],\n                operator: And,\n                operands: [\n                  {\n                    path: [\"name\"],\n                    operator: Like,\n                    valueText: \"*Martin Wallace*\"\n                  },\n                  {\n                    path: [\"yearsActive\"],\n                    operator: GreaterThan,\n                    valueInt: 10\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ) {\n      name\n      rules\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name and rules of board games that have more than 2 minimum players and either have \"strategy\" in their name or are created by Martin Wallace and have been active for more than 10 years.\n```", "apiRef": "Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-where-nested-multiple-conditions.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}", "schemaPath": "boardgame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the case title and case summary of legal cases that occurred after 2010 and either contain the word \"fraud\" in the case title or have a party involved as a defendant.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LegalCase(\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"year\"],\n            operator: GreaterThan,\n            valueInt: 2010\n          },\n          {\n            operator: Or,\n            operands: [\n              {\n                path: [\"caseTitle\"],\n                operator: Like,\n                valueText: \"*fraud*\"\n              },\n              {\n                path: [\"involvedParty\", \"role\"],\n                operator: Equal,\n                valueText: \"Defendant\"\n              }\n            ]\n          }\n        ]\n      }\n    ) {\n      caseTitle\n      caseSummary\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the case title and case summary of legal cases that occurred after 2010 and either contain the word \"fraud\" in the case title or have a party involved as a defendant.\n```", "apiRef": "Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-where-nested-multiple-conditions.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}", "schemaPath": "legalcases.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name and cuisine of restaurants with a seating capacity greater than 50 that either contain \"Italian\" in the name or have a head chef with a specialty in \"French\".\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Restaurant(\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"seatingCapacity\"],\n            operator: GreaterThan,\n            valueInt: 50\n          },\n          {\n            operator: Or,\n            operands: [\n              {\n                path: [\"name\"],\n                operator: Like,\n                valueText: \"*Italian*\"\n              },\n              {\n                path: [\"headChef\", \"... on Chef\", \"specialty\"],\n                operator: Like,\n                valueText: \"*French*\"\n              }\n            ]\n          }\n        ]\n      }\n    ) {\n      name\n      cuisine\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name and cuisine of restaurants with a seating capacity greater than 50 that either contain \"Italian\" in the name or have a head chef with a specialty in \"French\".\n```", "apiRef": "Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-where-nested-multiple-conditions.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}", "schemaPath": "finedining.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the content and hashtags of posts with more than 100 likes that either contain the word \"vacation\" in the content or have the hashtag \"beach\".\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Post(\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"likes\"],\n            operator: GreaterThan,\n            valueInt: 100\n          },\n          {\n            operator: Or,\n            operands: [\n              {\n                path: [\"content\"],\n                operator: Like,\n                valueText: \"*vacation*\"\n              },\n              {\n                path: [\"hashtags\"],\n                operator: Contains,\n                valueText: \"beach\"\n              }\n            ]\n          }\n        ]\n      }\n    ) {\n      content\n      hashtags\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the content and hashtags of posts with more than 100 likes that either contain the word \"vacation\" in the content or have the hashtag \"beach\".\n```", "apiRef": "Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-where-nested-multiple-conditions.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}", "schemaPath": "socialmedia.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the repository name and description of code repositories with more than 1000 stars that either contain \"machine learning\" in the repository name or are maintained by a user named \"john\" who has made more than 50 contributions.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CodeRepository(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"repositoryName\"],\n            operator: Like,\n            valueText: \"*machine learning*\"\n          },\n          {\n            operator: Or,\n            operands: [\n              {\n                path: [\"stars\"],\n                operator: GreaterThan,\n                valueInt: 1000\n              },\n              {\n                path: [\"maintainedBy\"],\n                operator: And,\n                operands: [\n                  {\n                    path: [\"contributions\"],\n                    operator: GreaterThan,\n                    valueInt: 50\n                  },\n                  {\n                    path: [\"username\"],\n                    operator: Like,\n                    valueText: \"*john*\"\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ) {\n      repositoryName\n      description\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the repository name and description of code repositories with more than 1000 stars that either contain \"machine learning\" in the repository name or are maintained by a user named \"john\" who has made more than 50 contributions.\n```", "apiRef": "Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-where-nested-multiple-conditions.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}", "schemaPath": "coderepos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, origin, and tasting notes of wines with a vintage year greater than 2010 that are either red or have \"cabernet\" in the grape variety.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Wine(\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"vintageYear\"],\n            operator: GreaterThan,\n            valueInt: 2010\n          },\n          {\n            operator: Or,\n            operands: [\n              {\n                path: [\"isRed\"],\n                operator: Equals,\n                valueBoolean: true\n              },\n              {\n                path: [\"grapeVariety\"],\n                operator: Like,\n                valueText: \"*cabernet*\"\n              }\n            ]\n          }\n        ]\n      }\n    ) {\n      name\n      origin\n      tastingNotes\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, origin, and tasting notes of wines with a vintage year greater than 2010 that are either red or have \"cabernet\" in the grape variety.\n```", "apiRef": "Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-where-nested-multiple-conditions.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}", "schemaPath": "wines.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name and description of products with a price less than 100 that either contain \"shoes\" or \"clothes\" in the name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"name\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n              {\n                path: [\"price\"],\n                operator: GreaterThan,\n                valueInt: 700\n              },\n              {\n                path: [\"price\"],\n                operator: LessThan,\n                valueInt: 300\n              }\n            ]\n          }\n        ]\n      }\n    ) {\n      name\n      description\n      price\n      inStock\n      hasReview {\n        ... on Review {\n          content\n          rating\n        }\n      }\n    }\n  }\n}\n```\n", "nlcommand": "```text\nShow me the name and description of products with a price less than 100 that either contain \"shoes\" or \"clothes\" in the name.\n```", "apiRef": "Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-where-nested-multiple-conditions.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}", "schemaPath": "ecommerce.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title and description of events that start after January 1, 2022 and either have \"conference\" in the title or are held at a venue with \"hotel\" in the name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Event(\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"startTime\"],\n            operator: GreaterThan,\n            valueDate: \"2022-01-01\"\n          },\n          {\n            operator: Or,\n            operands: [\n              {\n                path: [\"title\"],\n                operator: Like,\n                valueText: \"*conference*\"\n              },\n              {\n                path: [\"atVenue\"],\n                operator: And,\n                operands: [\n                  {\n                    path: [\"name\"],\n                    operator: Like,\n                    valueText: \"*hotel*\"\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ) {\n      title\n      description\n    }\n  }\n}\n```\n\nThis corrected API request is based on the custom database schema provided. It retrieves events that meet the following conditions:\n- The start time is after January 1, 2022.\n- The title contains the substring \"conference\" or the venue name contains the substring \"hotel\".\n\nThe requested properties for each event are the title and description.\n\nPlease note that the `Class` name in the API request aligns with the class name \"Event\" in the custom schema. The `... on` syntax is not required in this case as there are no linked properties to access.", "nlcommand": "```text\nShow me the title and description of events that start after January 1, 2022 and either have \"conference\" in the title or are held at a venue with \"hotel\" in the name.\n```", "apiRef": "Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-where-nested-multiple-conditions.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}", "schemaPath": "event.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name and online status of news outlets founded after the year 2000 that are either named \"CNN\" or have journalists with more than 5 years of experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NewsOutlet(\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"foundingYear\"],\n            operator: GreaterThan,\n            valueInt: 2000\n          },\n          {\n            operator: Or,\n            operands: [\n              {\n                path: [\"name\"],\n                operator: Like,\n                valueText: \"*CNN*\"\n              },\n              {\n                path: [\"hasJournalist\", \"... on\", \"Journalist\", \"yearsExperience\"],\n                operator: GreaterThan,\n                valueInt: 5\n              }\n            ]\n          }\n        ]\n      }\n    ) {\n      name\n      isOnline\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name and online status of news outlets founded after the year 2000 that are either named \"CNN\" or have journalists with more than 5 years of experience.\n```", "apiRef": "Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-where-nested-multiple-conditions.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}", "schemaPath": "news.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the full name, email, and phone of contacts who are leads and either have \"John\" in their full name or are associated with a company that contains \"Acme\" in its name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Contact(\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"isLead\"],\n            operator: Equal,\n            valueBoolean: true\n          },\n          {\n            operator: Or,\n            operands: [\n              {\n                path: [\"fullName\"],\n                operator: Like,\n                valueText: \"*John*\"\n              },\n              {\n                path: [\"associatedCompany\", \"name\"],\n                operator: Like,\n                valueText: \"*Acme*\"\n              }\n            ]\n          }\n        ]\n      }\n    ) {\n      fullName\n      email\n      phone\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the full name, email, and phone of contacts who are leads and either have \"John\" in their full name or are associated with a company that contains \"Acme\" in its name.\n```", "apiRef": "Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-where-nested-multiple-conditions.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}", "schemaPath": "crm.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, job title, and salary of employees with a salary greater than $50,000 who are either engineers or work on a project with a budget greater than $1,000,000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Employee(\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"salary\"],\n            operator: GreaterThan,\n            valueNumber: 50000\n          },\n          {\n            operator: Or,\n            operands: [\n              {\n                path: [\"jobTitle\"],\n                operator: Like,\n                valueText: \"*engineer*\"\n              },\n              {\n                path: [\"worksOn\", \"... on\", \"Project\", \"budget\"],\n                operator: GreaterThan,\n                valueNumber: 1000000\n              }\n            ]\n          }\n        ]\n      }\n    ) {\n      name\n      jobTitle\n      salary\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, job title, and salary of employees with a salary greater than $50,000 who are either engineers or work on a project with a budget greater than $1,000,000.\n```", "apiRef": "Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-where-nested-multiple-conditions.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}", "schemaPath": "employees.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name and description of products with a price less than 10 that either contain \"apple\" or \"banana\" in the name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"name\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n              {\n                path: [\"price\"],\n                operator: GreaterThan,\n                valueInt: 700\n              },\n              {\n                path: [\"price\"],\n                operator: LessThan,\n                valueInt: 300\n              }\n            ]\n          }\n        ]\n      }\n    ) {\n      name\n      description\n      price\n      isOrganic\n      category {\n        name\n        productCount\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name and description of products with a price less than 10 that either contain \"apple\" or \"banana\" in the name.\n```", "apiRef": "Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-where-nested-multiple-conditions.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}", "schemaPath": "grocerystore.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, city, wins, isChampion, and inLeague information of teams that have more than 10 wins and are either named \"Lakers\" or belong to a league with a name containing \"NBA\".\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Team(\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"wins\"],\n            operator: GreaterThan,\n            valueInt: 10\n          },\n          {\n            operator: Or,\n            operands: [\n              {\n                path: [\"name\"],\n                operator: Like,\n                valueText: \"*Lakers*\"\n              },\n              {\n                path: [\"inLeague\", \"name\"],\n                operator: Like,\n                valueText: \"*NBA*\"\n              }\n            ]\n          }\n        ]\n      }\n    ) {\n      name\n      city\n      wins\n      isChampion\n      inLeague {\n        name\n        teams\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, city, wins, isChampion, and inLeague information of teams that have more than 10 wins and are either named \"Lakers\" or belong to a league with a name containing \"NBA\".\n```", "apiRef": "Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-where-nested-multiple-conditions.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name and menu of coffee shops that were founded after the year 2000 and are either named \"Starbucks\" or located in a neighborhood with \"Downtown\" in its name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CoffeeShop(\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"yearFounded\"],\n            operator: GreaterThan,\n            valueInt: 2000\n          },\n          {\n            operator: Or,\n            operands: [\n              {\n                path: [\"name\"],\n                operator: Like,\n                valueText: \"*Starbucks*\"\n              },\n              {\n                path: [\"locatedIn\", \"name\"],\n                operator: Like,\n                valueText: \"*Downtown*\"\n              }\n            ]\n          }\n        ]\n      }\n    ) {\n      name\n      menu\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name and menu of coffee shops that were founded after the year 2000 and are either named \"Starbucks\" or located in a neighborhood with \"Downtown\" in its name.\n```", "apiRef": "Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-where-nested-multiple-conditions.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}", "schemaPath": "coffeeshop.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the beer name and tasting notes of craft beers with an alcohol content greater than 5.0 that either contain \"IPA\" in the beer name or were brewed by a brewery founded after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CraftBeer(\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"alcoholContent\"],\n            operator: GreaterThan,\n            valueNumber: 5.0\n          },\n          {\n            operator: Or,\n            operands: [\n              {\n                path: [\"beerName\"],\n                operator: Like,\n                valueText: \"*IPA*\"\n              },\n              {\n                path: [\"brewery\", \"foundedYear\"],\n                operator: GreaterThan,\n                valueInt: 2000\n              }\n            ]\n          }\n        ]\n      }\n    ) {\n      beerName\n      tastingNotes\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the beer name and tasting notes of craft beers with an alcohol content greater than 5.0 that either contain \"IPA\" in the beer name or were brewed by a brewery founded after the year 2000.\n```", "apiRef": "Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-where-nested-multiple-conditions.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}", "schemaPath": "craftbeer.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title and description of courses with a price less than 100 that either contain \"programming\" in the title or \"web development\" in the description.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Course(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"title\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n              {\n                path: [\"price\"],\n                operator: GreaterThan,\n                valueInt: 700\n              },\n              {\n                path: [\"price\"],\n                operator: LessThan,\n                valueInt: 300\n              }\n            ]\n          }\n        ]\n      }\n    ) {\n      title\n      description\n      price\n      isFree\n      taughtBy {\n        ... on Instructor {\n          name\n          yearsOfExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title and description of courses with a price less than 100 that either contain \"programming\" in the title or \"web development\" in the description.\n```", "apiRef": "Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the operator of an outer operands value to And or Or. Then, you can provide two or more conditions to the inner operands.\n\nThe following example specifies that:\n\nthe answer property must contain a substring \"nest\", And\nthe points property must be greater than 700, Or, the points property must be less than 300.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        operator: And,\n        operands: [\n          {\n            path: [\"answer\"],\n            operator: Like,\n            valueText: \"*nest*\"\n          },\n          {\n            operator: Or,\n            operands: [\n                {\n                    path: [\"points\"],\n                    operator: GreaterThan,\n                    valueInt: 700\n                },\n                {\n                    path: [\"points\"],\n                    operator: LessThan,\n                    valueInt: 300\n                },\n            ]\n          }\n        ]\n\n      }\n    ) {\n      question\n      answer\n      round\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-where-nested-multiple-conditions.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}", "schemaPath": "onlinecourse.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count, type, and top occurrences of the title, startTime, isVirtual, name, and capacity properties of the Events in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Event {\n      title {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      description {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      startTime {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      isVirtual {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      atVenue {\n        name {\n          count\n          type\n          topOccurrences {\n            occurs\n            value\n          }\n        }\n        capacity {\n          count\n          sum\n        }\n      }\n    }\n  }\n}\n```\n\nNote: The corrected API request retrieves aggregated information about the properties of the \"Event\" class in the custom database schema. It includes the count, type, and topOccurrences for the \"title\", \"description\", \"startTime\", and \"isVirtual\" properties. Additionally, it retrieves the aggregated information for the \"name\" property of the linked \"Venue\" class, as well as the count and sum for the \"capacity\" property of the \"Venue\" class.", "nlcommand": "```text\nShow me the count, type, and top occurrences of the title, startTime, isVirtual, name, and capacity properties of the Events in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}", "schemaPath": "event.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and top occurrences of full names and lead status for Contacts in the database.\nAlso, show me the count and top occurrences of company names and the sum of revenues for Companies in the database.\nFinally, show me the count and top occurrences of deal titles and the sum of deal values for Deals in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Contact {\n      fullName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      isLead {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n    Company {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      revenue {\n        count\n        sum\n      }\n    }\n    Deal {\n      title {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      value {\n        count\n        sum\n      }\n    }\n  }\n}\n```\n\nNote: Please make sure to replace `Aggregate`, `Contact`, `Company`, and `Deal` with the actual class names in your custom schema.", "nlcommand": "```text\nShow me the count and top occurrences of full names and lead status for Contacts in the database.\nAlso, show me the count and top occurrences of company names and the sum of revenues for Companies in the database.\nFinally, show me the count and top occurrences of deal titles and the sum of deal values for Deals in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}", "schemaPath": "crm.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Artworks class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Artwork {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Artworks class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}", "schemaPath": "artgallery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the eventName and description of Historical Events with BM25 scoring to the query \"World War II\", please rerank with this same query on the eventName property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HistoricalEvent(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      eventName\n      description\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"eventName\"\n        ){\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the eventName and description of Historical Events with BM25 scoring to the query \"World War II\", please rerank with this same query on the eventName property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}", "schemaPath": "historicalevent.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title and synopsis of TV series with BM25 scoring to the query \"crime drama\", please rerank with this same query on the title property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TVSeries(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      title\n      synopsis\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"title\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title and synopsis of TV series with BM25 scoring to the query \"crime drama\", please rerank with this same query on the title property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}", "schemaPath": "tvseries.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and description of workouts with BM25 scoring to the query \"cardio\", please rerank with this same query on the name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Workout(\n      bm25: {\n        query: \"cardio\"\n      }\n    ) {\n      name\n      description\n      _additional {\n        rerank(\n          query: \"cardio\",\n          property: \"name\"\n        ){\n          score\n        }\n      }\n    }\n  }\n}\n```\n\nThe API request is almost correct. However, there is a missing closing curly brace for the \"usesEquipment\" property in the custom database schema. Here is the corrected API request:\n\n```graphql\n{\n  Get {\n    Workout(\n      bm25: {\n        query: \"cardio\"\n      }\n    ) {\n      name\n      description\n      _additional {\n        rerank(\n          query: \"cardio\",\n          property: \"name\"\n        ){\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name and description of workouts with BM25 scoring to the query \"cardio\", please rerank with this same query on the name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}", "schemaPath": "workouttracker.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title and lyrics of songs with BM25 scoring to the query \"love\", please rerank with this same query on the title property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Song(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      title\n      lyrics\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"title\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title and lyrics of songs with BM25 scoring to the query \"love\", please rerank with this same query on the title property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}", "schemaPath": "music.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the species and care instructions of plants with BM25 scoring to the query \"rose\", please rerank with this same query on the species property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      species\n      careInstructions\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"species\"\n        ){\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the species and care instructions of plants with BM25 scoring to the query \"rose\", please rerank with this same query on the species property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}", "schemaPath": "gardening.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title and instructions of recipes with BM25 scoring to the query \"pasta carbonara\", please rerank with this same query on the title property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Recipe(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      title\n      instructions\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"title\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title and instructions of recipes with BM25 scoring to the query \"pasta carbonara\", please rerank with this same query on the title property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}", "schemaPath": "recipes.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and description of destinations with BM25 scoring to the query \"beach vacation\", please rerank with this same query on the name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Destination(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      name\n      description\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"name\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name and description of destinations with BM25 scoring to the query \"beach vacation\", please rerank with this same query on the name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}", "schemaPath": "traveldestination.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and location of aquariums with BM25 scoring to the query \"coral reef\", please rerank with this same query on the name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Aquarium(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      name\n      location\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"name\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name and location of aquariums with BM25 scoring to the query \"coral reef\", please rerank with this same query on the name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}", "schemaPath": "aquarium.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and description of Yoga Poses with BM25 scoring to the query \"downward dog\", please rerank with this same query on the name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    YogaPose(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      name\n      description\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"name\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name and description of Yoga Poses with BM25 scoring to the query \"downward dog\", please rerank with this same query on the name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}", "schemaPath": "yogapose.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the summary and content of PodClips with BM25 scoring to the query \"podcast clip\", please rerank with this same query on the summary property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PodClip(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      summary\n      content\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"summary\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the summary and content of PodClips with BM25 scoring to the query \"podcast clip\", please rerank with this same query on the summary property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}", "schemaPath": "podcast.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and description of instruments with BM25 scoring to the query \"guitar\", please rerank with this same query on the name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Instrument(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      name\n      description\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"description\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name and description of instruments with BM25 scoring to the query \"guitar\", please rerank with this same query on the name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}", "schemaPath": "musicalinstrument.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and rules of board games with BM25 scoring to the query \"strategy\", please rerank with this same query on the name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\nThe correct API request for the custom database schema is:\n\n```graphql\n{\n  Get {\n    BoardGame(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      name\n      rules\n      _additional {\n        rerank(\n          property: \"name\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\nPlease note that the `JeopardyQuestion` class in the API reference should be replaced with the `BoardGame` class in the custom database schema.", "nlcommand": "```text\nPlease show me the name and rules of board games with BM25 scoring to the query \"strategy\", please rerank with this same query on the name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}", "schemaPath": "boardgame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the location and equipment of weather stations with BM25 scoring to the query \"temperature\", please rerank with this same query on the location property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\nThe correct API request for the custom database schema is:\n\n```graphql\n{\n  Get {\n    WeatherStation(\n      bm25: {\n        query: \"temperature\"\n      }\n    ) {\n      location\n      equipment\n      _additional {\n        rerank(\n          property: \"location\"\n          query: \"temperature\"\n        ){\n          score\n        }\n      }\n    }\n  }\n}\n```\n\nPlease note that the `WeatherStation` class should be used instead of `JeopardyQuestion` in the API request. Additionally, the `property` and `query` arguments in the `rerank` field should be swapped to match the correct order.", "nlcommand": "```text\nPlease show me the location and equipment of weather stations with BM25 scoring to the query \"temperature\", please rerank with this same query on the location property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}", "schemaPath": "weatherstation.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title and genre of movies with BM25 scoring to the query \"action thriller\", please rerank with this same query on the title property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\nThe correct API request for the custom database schema is:\n\n```graphql\n{\n  Get {\n    Movie(\n      bm25: {\n        query: \"action thriller\"\n      }\n    ) {\n      title\n      genre\n      _additional {\n        rerank(\n          property: \"title\"\n          query: \"action thriller\"\n        ){\n          score\n        }\n      }\n    }\n  }\n}\n```\n\nPlease note that the `Movie` class should be used instead of `JeopardyQuestion` in the API request. The `property` and `query` arguments in the `rerank` field should be swapped to match the correct order.", "nlcommand": "```text\nPlease show me the title and genre of movies with BM25 scoring to the query \"action thriller\", please rerank with this same query on the title property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}", "schemaPath": "movies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the modelName and application of AIModels with BM25 scoring to the query \"machine learning\", please rerank with this same query on the modelName property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\nThe correct API request for the custom database schema is:\n\n```graphql\n{\n  Get {\n    AIModel(\n      bm25: {\n        query: \"machine learning\"\n      }\n    ) {\n      modelName\n      application\n      _additional {\n        rerank(\n          property: \"modelName\"\n          query: \"machine learning\"\n        ){\n          score\n        }\n      }\n    }\n  }\n}\n```\n\nPlease note that the `AIModel` class is used in the API request, which aligns with the class name in the custom schema. The `rerank` function is called with the correct arguments, where the `property` is set to \"modelName\" and the `query` is set to \"machine learning\".", "nlcommand": "```text\nPlease show me the modelName and application of AIModels with BM25 scoring to the query \"machine learning\", please rerank with this same query on the modelName property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}", "schemaPath": "AIModels.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the make and model of cars with BM25 scoring to the query \"electric car\", please rerank with this same query on the make property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car(\n      bm25: {\n        query: \"electric car\"\n      }\n    ) {\n      make\n      model\n      _additional {\n        rerank(\n          property: \"make\",\n          query: \"electric car\"\n        ){\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the make and model of cars with BM25 scoring to the query \"electric car\", please rerank with this same query on the make property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}", "schemaPath": "carrental.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the case title and case summary of legal cases with BM25 scoring to the query \"criminal law\", please rerank with this same query on the case title property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LegalCase(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      caseTitle\n      caseSummary\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"caseTitle\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the case title and case summary of legal cases with BM25 scoring to the query \"criminal law\", please rerank with this same query on the case title property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}", "schemaPath": "legalcases.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the device name and features of smart devices with BM25 scoring to the query \"smart speaker\", please rerank with this same query on the device name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SmartDevice(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      deviceName\n      features\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"deviceName\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the device name and features of smart devices with BM25 scoring to the query \"smart speaker\", please rerank with this same query on the device name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "smarthome.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the gear name and description of outdoor gear with BM25 scoring to the query \"hiking boots\", please rerank with this same query on the gear name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\nThe correct API request for the custom database schema is:\n\n```graphql\n{\n  Get {\n    OutdoorGear(\n      bm25: {\n        query: \"hiking boots\"\n      }\n    ) {\n      gearName\n      description\n      _additional {\n        rerank(\n          property: \"gearName\"\n          query: \"hiking boots\"\n        ){\n          score\n        }\n      }\n    }\n  }\n}\n```\n\nPlease note that the `OutdoorGear` class should be used instead of `JeopardyQuestion` as per the custom database schema.", "nlcommand": "```text\nPlease show me the gear name and description of outdoor gear with BM25 scoring to the query \"hiking boots\", please rerank with this same query on the gear name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}", "schemaPath": "outdoorgear.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and cuisine of restaurants with BM25 scoring to the query \"italian food\", please rerank with this same query on the name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\nThe correct API request for the custom database schema is:\n\n```graphql\n{\n  Get {\n    Restaurant(\n      bm25: {\n        query: \"italian food\"\n      }\n    ) {\n      name\n      cuisine\n      _additional {\n        rerank(\n          property: \"name\"\n          query: \"italian food\"\n        ){\n          score\n        }\n      }\n    }\n  }\n}\n```\n\nPlease note that the `Restaurant` class should be used instead of `JeopardyQuestion` in the API request.", "nlcommand": "```text\nPlease show me the name and cuisine of restaurants with BM25 scoring to the query \"italian food\", please rerank with this same query on the name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}", "schemaPath": "finedining.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the content and hashtags of posts with BM25 scoring to the query \"social media platform\", please rerank with this same query on the content property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Post(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      content\n      hashtags\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"content\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the content and hashtags of posts with BM25 scoring to the query \"social media platform\", please rerank with this same query on the content property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}", "schemaPath": "socialmedia.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and species of animals with BM25 scoring to the query \"dog\", please rerank with this same query on the name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\nThe correct API request for the custom database schema is:\n\n```graphql\n{\n  Get {\n    Animal(\n      bm25: {\n        query: \"dog\"\n      }\n    ) {\n      name\n      species\n      _additional {\n        rerank(\n          property: \"name\"\n          query: \"dog\"\n        ){\n          score\n        }\n      }\n    }\n  }\n}\n```\n\nPlease note that the `Class` name in the API request aligns with the Class Name shown in the custom schema. Also, the properties are accessed without the `className.property` syntax.", "nlcommand": "```text\nPlease show me the name and species of animals with BM25 scoring to the query \"dog\", please rerank with this same query on the name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}", "schemaPath": "animalshelter.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and description of fashion brands with BM25 scoring to the query \"luxury fashion brand\", please rerank with this same query on the name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FashionBrand(\n      bm25: {\n        query: \"luxury fashion brand\"\n      }\n    ) {\n      name\n      description\n      _additional {\n        rerank(\n          property: \"name\",\n          query: \"luxury fashion brand\"\n        ){\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name and description of fashion brands with BM25 scoring to the query \"luxury fashion brand\", please rerank with this same query on the name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}", "schemaPath": "fashionbrand.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the repository name and description of code repositories with BM25 scoring to the query \"machine learning\", please rerank with this same query on the repository name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CodeRepository(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      repositoryName\n      description\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"description\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the repository name and description of code repositories with BM25 scoring to the query \"machine learning\", please rerank with this same query on the repository name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}", "schemaPath": "coderepos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and origin of wines with BM25 scoring to the query \"red wine\", please rerank with this same query on the name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Wine(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      name\n      origin\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"name\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name and origin of wines with BM25 scoring to the query \"red wine\", please rerank with this same query on the name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}", "schemaPath": "wines.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and diagnosis of patients with BM25 scoring to the query \"cancer treatment\", please rerank with this same query on the diagnosis property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Patient(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      name\n      diagnosis\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"diagnosis\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name and diagnosis of patients with BM25 scoring to the query \"cancer treatment\", please rerank with this same query on the diagnosis property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}", "schemaPath": "healthcare.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the model and manufacturer of telescopes with BM25 scoring to the query \"astronomy\", please rerank with this same query on the model property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Telescope(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      model\n      manufacturer\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"question\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the model and manufacturer of telescopes with BM25 scoring to the query \"astronomy\", please rerank with this same query on the model property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}", "schemaPath": "astrology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and description of products with BM25 scoring to the query \"smartphone\", please rerank with this same query on the name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"question\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name and description of products with BM25 scoring to the query \"smartphone\", please rerank with this same query on the name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}", "schemaPath": "ecommerce.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and product of startups with BM25 scoring to the query \"tech company\", please rerank with this same query on the name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Startup(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      name\n      product\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"name\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name and product of startups with BM25 scoring to the query \"tech company\", please rerank with this same query on the name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}", "schemaPath": "startups.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title and description of events with BM25 scoring to the query \"music concert\", please rerank with this same query on the title property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Event(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      title\n      description\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"title\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title and description of events with BM25 scoring to the query \"music concert\", please rerank with this same query on the title property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}", "schemaPath": "event.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and founding year of news outlets with BM25 scoring to the query \"breaking news\", please rerank with this same query on the name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NewsOutlet(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      name\n      foundingYear\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"name\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name and founding year of news outlets with BM25 scoring to the query \"breaking news\", please rerank with this same query on the name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}", "schemaPath": "news.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title and genre of games with BM25 scoring to the query \"action adventure\", please rerank with this same query on the title property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Game(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      title\n      genre\n      _additional {\n        rerank(\n          property: \"title\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title and genre of games with BM25 scoring to the query \"action adventure\", please rerank with this same query on the title property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}", "schemaPath": "videogame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title and medium of artworks with BM25 scoring to the query \"abstract painting\", please rerank with this same query on the title property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Artwork(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      title\n      medium\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"title\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title and medium of artworks with BM25 scoring to the query \"abstract painting\", please rerank with this same query on the title property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}", "schemaPath": "artgallery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the make and model of cars with BM25 scoring to the query \"repair\", please rerank with this same query on the make property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car(\n      bm25: {\n        query: \"repair\"\n      }\n    ) {\n      make\n      model\n      _additional {\n        rerank(\n          property: \"make\",\n          query: \"repair\"\n        ){\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the make and model of cars with BM25 scoring to the query \"repair\", please rerank with this same query on the make property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}", "schemaPath": "automotiverepair.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the full name and email of contacts with BM25 scoring to the query \"John Doe\", please rerank with this same query on the full name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "Based on the provided API reference and custom database schema, the correct API request for the custom database schema would be as follows:\n\n```graphql\n{\n  Get {\n    Contact(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      fullName\n      email\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"question\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\nPlease note that the API request is formatted according to the custom database schema and includes the necessary syntax for accessing properties of linked objects using the \"... on\" syntax.", "nlcommand": "```text\nPlease show me the full name and email of contacts with BM25 scoring to the query \"John Doe\", please rerank with this same query on the full name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}", "schemaPath": "crm.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and hub airport of airlines with BM25 scoring to the query \"international flights\", please rerank with this same query on the name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Airline(\n      bm25: {\n        query: \"international flights\"\n      }\n    ) {\n      name\n      hubAirport\n      _additional {\n        rerank(\n          query: \"international flights\",\n          property: \"name\"\n        ){\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name and hub airport of airlines with BM25 scoring to the query \"international flights\", please rerank with this same query on the name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}", "schemaPath": "airline.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title and summary of books with BM25 scoring for the query \"robot police science fiction\". Additionally, please rerank the results based on the query \"robot police science fiction\" on the title property and display the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Book(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      title\n      summary\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"title\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title and summary of books with BM25 scoring for the query \"robot police science fiction\". Additionally, please rerank the results based on the query \"robot police science fiction\" on the title property and display the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}", "schemaPath": "books.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and symbol of cryptocurrencies with BM25 scoring to the query \"bitcoin\", please rerank with this same query on the name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Cryptocurrency(\n      bm25: {\n        query: \"bitcoin\"\n      }\n    ) {\n      name\n      symbol\n      _additional {\n        rerank(\n          property: \"name\"\n          query: \"bitcoin\"\n        ){\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name and symbol of cryptocurrencies with BM25 scoring to the query \"bitcoin\", please rerank with this same query on the name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}", "schemaPath": "cryptocurrency.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and job title of employees with BM25 scoring to the query \"software engineer\", please rerank with this same query on the job title property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Employee(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      name\n      jobTitle\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"jobTitle\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name and job title of employees with BM25 scoring to the query \"software engineer\", please rerank with this same query on the job title property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}", "schemaPath": "employees.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and description of products with BM25 scoring to the query \"organic apples\", please rerank with this same query on the name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      name\n      description\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"name\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name and description of products with BM25 scoring to the query \"organic apples\", please rerank with this same query on the name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}", "schemaPath": "grocerystore.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and location of museums with BM25 scoring to the query \"art history science\", please rerank with this same query on the name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Museum(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      name\n      location\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"name\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name and location of museums with BM25 scoring to the query \"art history science\", please rerank with this same query on the name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}", "schemaPath": "museum.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and city of teams with BM25 scoring to the query \"basketball\", please rerank with this same query on the name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\nThe correct API request for the custom database schema would be:\n\n```graphql\n{\n  Get {\n    Team(\n      bm25: {\n        query: \"basketball\"\n      }\n    ) {\n      name\n      city\n      _additional {\n        rerank(\n          property: \"name\"\n          query: \"basketball\"\n        ){\n          score\n        }\n      }\n    }\n  }\n}\n```\n\nPlease note that the `Team` class is used instead of `JeopardyQuestion` as per the custom database schema. The `property` and `query` arguments in the `rerank` field are also swapped to match the correct syntax.", "nlcommand": "```text\nPlease show me the name and city of teams with BM25 scoring to the query \"basketball\", please rerank with this same query on the name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and menu of coffee shops with BM25 scoring to the query \"latte\", please rerank with this same query on the name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CoffeeShop(\n      bm25: {\n        query: \"latte\"\n      }\n    ) {\n      name\n      menu\n      _additional {\n        rerank(\n          property: \"name\",\n          query: \"latte\"\n        ){\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name and menu of coffee shops with BM25 scoring to the query \"latte\", please rerank with this same query on the name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}", "schemaPath": "coffeeshop.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the address and description of houses with BM25 scoring to the query \"spacious backyard\", please rerank with this same query on the description property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    House(\n      bm25: {\n        query: \"spacious backyard\"\n      }\n    ) {\n      address\n      description\n      _additional {\n        rerank(\n          query: \"spacious backyard\",\n          property: \"description\"\n        ){\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the address and description of houses with BM25 scoring to the query \"spacious backyard\", please rerank with this same query on the description property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}", "schemaPath": "realestate.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and description of diet plans with BM25 scoring to the query \"weight loss\", please rerank with this same query on the name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DietPlan(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      name\n      description\n      _additional {\n        rerank(\n          property: \"name\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name and description of diet plans with BM25 scoring to the query \"weight loss\", please rerank with this same query on the name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}", "schemaPath": "dietplan.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the beer name and tasting notes for Craft Beers with BM25 scoring to the query \"IPA\", please rerank with this same query on the beer name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CraftBeer(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      beerName\n      tastingNotes\n      _additional {\n        rerank(\n          property: \"beerName\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the beer name and tasting notes for Craft Beers with BM25 scoring to the query \"IPA\", please rerank with this same query on the beer name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}", "schemaPath": "craftbeer.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and services of spas with BM25 scoring to the query \"massage\", please rerank with this same query on the name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Spa(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      name\n      services\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"name\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name and services of spas with BM25 scoring to the query \"massage\", please rerank with this same query on the name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}", "schemaPath": "spa.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title and description of courses with BM25 scoring to the query \"web development\", please rerank with this same query on the title property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Course(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      title\n      description\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"title\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title and description of courses with BM25 scoring to the query \"web development\", please rerank with this same query on the title property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}", "schemaPath": "onlinecourse.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title and abstract of papers with BM25 scoring to the query \"machine learning\", please rerank with this same query on the title property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Paper(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      title\n      abstract\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"title\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title and abstract of papers with BM25 scoring to the query \"machine learning\", please rerank with this same query on the title property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}", "schemaPath": "scientificpapers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title and description of job listings with BM25 scoring to the query \"software engineer\", please rerank with this same query on the title property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JobListing(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      title\n      description\n      _additional {\n        rerank(\n          query: \"publication\",\n          property: \"description\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title and description of job listings with BM25 scoring to the query \"software engineer\", please rerank with this same query on the title property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "joblistings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name and description of programming languages with BM25 scoring to the query \"Python programming language\", please rerank with this same query on the name property and show the rerank score.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```\n\nThe correct API request for the custom database schema is:\n\n```graphql\n{\n  Get {\n    ProgrammingLanguage(\n      bm25: {\n        query: \"Python programming language\"\n      }\n    ) {\n      name\n      description\n      _additional {\n        rerank(\n          property: \"name\"\n          query: \"Python programming language\"\n        ){\n          score\n        }\n      }\n    }\n  }\n}\n```\n\nPlease note that the `ProgrammingLanguage` class should be used instead of `JeopardyQuestion` in the API request.", "nlcommand": "```text\nPlease show me the name and description of programming languages with BM25 scoring to the query \"Python programming language\", please rerank with this same query on the name property and show the rerank score.\n```", "apiRef": "Reranking bm25 search results\n\nThe example below uses rerank in a bm25 query to sort the top results for the query \"paper\" towards \"publication\" to disambiguate from those related to other meanings, such as the material \"paper\".\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      bm25: {\n        query: \"paper\"\n      },\n      limit: 10\n    ) {\n      answer\n      question\n      _additional {\n        distance\n        rerank(\n          property: \"question\"\n          query: \"publication\"\n        ) {\n          score\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-reranking-bm25.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}", "schemaPath": "programminglanguage.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    nearText with distance threshold\n\nDistance threshold\n\nYou can set a threshold for similarity search by setting a maximum\u00a0`distance`. The distance indicates how dissimilar two objects are.\n\nMultiple\u00a0distance metrics are available in Weaviate. You can set it in the schema.\n\nThe example below searches the\u00a0`JeopardyQuestion`\u00a0class for objects best matching\u00a0`\"animals in movies\"`, returning those with a\u00a0`distance`\u00a0less than\u00a0`0.18`:\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in movies\"],\n        distance: 0.18\n      }\n    ) {\n      question\n      answer\n      _additional {\n        distance\n      }\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the PodClips that are semantically similar to the query 'technology' with a vector distance greater than 0.25. For each PodClip, show the summary, content, speaker, podNum, clipNumber, Featured status, and information about the podcast it belongs to (including the summary and podNum). Also, include information about the chapter it belongs to (including the description, title, timeStart, timeEnd, duration), and the podcast it is from (including the summary and podNum).\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PodClip(\n      nearText: {\n        concepts: [\"animals in movies\"],\n        distance: 0.18\n      }\n    ) {\n      summary\n      content\n      speaker\n      podNum\n      clipNumber\n      Featured\n      inPodcast {\n        ... on Podcast {\n          summary\n          podNum\n        }\n      }\n      inChapter {\n        ... on Chapter {\n          description\n          title\n          timeStart\n          timeEnd\n          duration\n          fromPodcast {\n            ... on Podcast {\n              summary\n              podNum\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the PodClips that are semantically similar to the query 'technology' with a vector distance greater than 0.25. For each PodClip, show the summary, content, speaker, podNum, clipNumber, Featured status, and information about the podcast it belongs to (including the summary and podNum). Also, include information about the chapter it belongs to (including the description, title, timeStart, timeEnd, duration), and the podcast it is from (including the summary and podNum).\n```\n", "apiRef": "nearText with distance threshold\n\nDistance threshold\n\nYou can set a threshold for similarity search by setting a maximum\u00a0`distance`. The distance indicates how dissimilar two objects are.\n\nMultiple\u00a0distance metrics are available in Weaviate. You can set it in the schema.\n\nThe example below searches the\u00a0`JeopardyQuestion`\u00a0class for objects best matching\u00a0`\"animals in movies\"`, returning those with a\u00a0`distance`\u00a0less than\u00a0`0.18`:\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in movies\"],\n        distance: 0.18\n      }\n    ) {\n      question\n      answer\n      _additional {\n        distance\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}", "schemaPath": "podcast.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the summary, content, speaker, pod number, clip number, featured status, podcast summary, podcast number, chapter description, chapter title, chapter start time, chapter end time, chapter duration, and podcast summary of Pod Clips with a clip number greater than 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PodClip(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      summary\n      content\n      speaker\n      podNum\n      clipNumber\n      Featured\n      inPodcast {\n        ... on Podcast {\n          summary\n          podNum\n        }\n      }\n      inChapter {\n        ... on Chapter {\n          description\n          title\n          timeStart\n          timeEnd\n          duration\n          fromPodcast {\n            ... on Podcast {\n              summary\n              podNum\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the summary, content, speaker, pod number, clip number, featured status, podcast summary, podcast number, chapter description, chapter title, chapter start time, chapter end time, chapter duration, and podcast summary of Pod Clips with a clip number greater than 5.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}", "schemaPath": "podcast.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title, description, virtual status, and linked venue's name and capacity of events starting after January 1, 2022.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Event(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      title\n      description\n      startTime\n      isVirtual\n      atVenue {\n        ... on Venue {\n          name\n          capacity\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title, description, virtual status, and linked venue's name and capacity of events starting after January 1, 2022.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}", "schemaPath": "event.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Simple Get to return a multiple properties\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n      answer\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the summary, content, speaker, podNum, clipNumber, Featured, inPodcast summary, inPodcast podNum, inChapter description, inChapter title, inChapter timeStart, inChapter timeEnd, inChapter duration, fromPodcast summary, fromPodcast podNum, hasClip summary, hasClip content, hasClip speaker, hasClip podNum, hasClip clipNumber, and hasClip Featured of the PodClip objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PodClip {\n      summary\n      content\n      speaker\n      podNum\n      clipNumber\n      Featured\n      inPodcast {\n        summary\n        podNum\n      }\n      inChapter {\n        description\n        title\n        timeStart\n        timeEnd\n        duration\n        fromPodcast {\n          summary\n          podNum\n        }\n        hasClip {\n          summary\n          content\n          speaker\n          podNum\n          clipNumber\n          Featured\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the summary, content, speaker, podNum, clipNumber, Featured, inPodcast summary, inPodcast podNum, inChapter description, inChapter title, inChapter timeStart, inChapter timeEnd, inChapter duration, fromPodcast summary, fromPodcast podNum, hasClip summary, hasClip content, hasClip speaker, hasClip podNum, hasClip clipNumber, and hasClip Featured of the PodClip objects.\n```", "apiRef": "Simple Get to return a multiple properties\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n      answer\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-multiple-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}", "schemaPath": "podcast.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Simple Get to return a multiple properties\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n      answer\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, origin, grape variety, tasting notes, vintage year, is red, and related winery information (name, location, and founded year) of the Wine objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Wine {\n      name\n      origin\n      grapeVariety\n      tastingNotes\n      vintageYear\n      isRed\n      relatedWinery {\n        Get {\n          Winery {\n            name\n            location\n            foundedYear\n          }\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, origin, grape variety, tasting notes, vintage year, is red, and related winery information (name, location, and founded year) of the Wine objects.\n```", "apiRef": "Simple Get to return a multiple properties\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n      answer\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-multiple-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}", "schemaPath": "wines.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    API REFERENCE:\n    Simple Get to return a multiple properties\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n      answer\n      points\n    }\n  }\n}\n```\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, city, wins, isChampion, and inLeague (including name and teams) of the Team objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Team {\n      name\n      city\n      wins\n      isChampion\n      inLeague {\n        ... on League {\n          name\n          teams\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, city, wins, isChampion, and inLeague (including name and teams) of the Team objects.\n```", "apiRef": "Simple Get to return a multiple properties\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n      answer\n      points\n    }\n  }\n}\n```", "apiRefPath": "get-multiple-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
